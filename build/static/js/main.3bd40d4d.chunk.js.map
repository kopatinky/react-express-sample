{"version":3,"sources":["game.js","board.js","index.js"],"names":["TicTacToe","name","setup","cells","Array","fill","moves","clickCell","G","ctx","id","currentPlayer","turn","moveLimit","endIf","map","row","symbols","i","every","some","winner","filter","c","length","draw","TicTacToeBoard","onClick","isActive","props","this","tbody","j","push","key","className","gameover","undefined","React","Component","TicTacToeClient","Client","game","board","debug","multiplayer","SocketIO","server","App","state","playerID","setState","render","document","getElementById"],"mappings":"oQA4BO,IAAMA,EAAY,CACvBC,KAAM,cAENC,MAAO,iBAAO,CACZC,MAAOC,MAAM,GAAGC,KAAK,QAGvBC,MAAO,CACLC,UADK,SACKC,EAAGC,EAAKC,GACI,OAAhBF,EAAEL,MAAMO,KACVF,EAAEL,MAAMO,GAAMD,EAAIE,iBAKxBC,KAAM,CAAEC,UAAW,GAEnBC,MAAO,SAACN,EAAGC,GACT,OAtCeN,EAsCDK,EAAEL,MArCA,CAChB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAQQY,KALK,SAAAC,GACpB,IAAMC,EAAUD,EAAID,KAAI,SAAAG,GAAC,OAAIf,EAAMe,MACnC,OAAOD,EAAQE,OAAM,SAAAD,GAAC,OAAU,OAANA,GAAcA,IAAMD,EAAQ,SAGpBG,MAAK,SAAAF,GAAC,OAAU,IAANA,KAsBnC,CAAEG,OAAQZ,EAAIE,eAEwB,IAA3CH,EAAEL,MAAMmB,QAAO,SAAAC,GAAC,OAAU,OAANA,KAAYC,OAC3B,CAAEC,MAAM,QADjB,EAzCJ,IAAmBtB,ICINuB,G,MAAb,4MAUEC,QAAU,SAAAjB,GACJ,EAAKkB,SAASlB,IAChB,EAAKmB,MAAMvB,MAAMC,UAAUG,IAZjC,uDAgBWA,GACP,QAAKoB,KAAKD,MAAMD,UACe,OAA3BE,KAAKD,MAAMrB,EAAEL,MAAMO,KAlB3B,+BAwBI,IAFQ,IAAD,OACHqB,EAAQ,GACHb,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAE1B,IADA,IAAIf,EAAQ,GADc,WAEjB6B,GACP,IAAMtB,EAAK,EAAIQ,EAAIc,EACnB7B,EAAM8B,KACJ,wBACEC,IAAKxB,EACLyB,UAAW,EAAKP,SAASlB,GAAM,SAAW,GAC1CiB,QAAS,kBAAM,EAAKA,QAAQjB,KAE3B,EAAKmB,MAAMrB,EAAEL,MAAMO,MARjBsB,EAAI,EAAGA,EAAI,EAAGA,IAAM,EAApBA,GAYTD,EAAME,KAAK,wBAAIC,IAAKhB,GAAIf,IAG1B,IAAIkB,EAAS,KAUb,OATIS,KAAKD,MAAMpB,IAAI2B,WACjBf,OACqCgB,IAAnCP,KAAKD,MAAMpB,IAAI2B,SAASf,OACtB,yBAAKX,GAAG,UAAR,WAA0BoB,KAAKD,MAAMpB,IAAI2B,SAASf,QAEhD,yBAAKX,GAAG,UAAR,UAKN,6BACE,2BAAOA,GAAG,SACR,+BAAQqB,IAETV,OAxDT,GAAoCiB,IAAMC,YCGpCC,EAAkBC,YAAO,CAC7BC,KAAM1C,EACN2C,MAAOjB,EACPkB,OAAO,EACPC,YAAaC,YAAS,CAAEC,OAAQ,qBAG5BC,E,4MACJC,MAAQ,CAAEC,SAAU,M,uDAEV,IAAD,OACP,OAA4B,OAAxBpB,KAAKmB,MAAMC,SAEX,6BACE,sCACA,4BAAQvB,QAAS,kBAAM,EAAKwB,SAAS,CAAED,SAAU,QAAjD,YAGA,4BAAQvB,QAAS,kBAAM,EAAKwB,SAAS,CAAED,SAAU,QAAjD,aAOJ,6BACE,kBAACV,EAAD,CAAiBU,SAAUpB,KAAKmB,MAAMC,gB,GAnB5BZ,IAAMC,WAyBxBa,iBAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.3bd40d4d.chunk.js","sourcesContent":["/*\n * Copyright 2017 The boardgame.io Authors\n *\n * Use of this source code is governed by a MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n */\n\nfunction IsVictory(cells) {\n  const positions = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n\n  const isRowComplete = row => {\n    const symbols = row.map(i => cells[i]);\n    return symbols.every(i => i !== null && i === symbols[0]);\n  };\n\n  return positions.map(isRowComplete).some(i => i === true);\n}\n\nexport const TicTacToe = {\n  name: \"tic-tac-toe\",\n\n  setup: () => ({\n    cells: Array(9).fill(null)\n  }),\n\n  moves: {\n    clickCell(G, ctx, id) {\n      if (G.cells[id] === null) {\n        G.cells[id] = ctx.currentPlayer;\n      }\n    }\n  },\n\n  turn: { moveLimit: 1 },\n\n  endIf: (G, ctx) => {\n    if (IsVictory(G.cells)) {\n      return { winner: ctx.currentPlayer };\n    }\n    if (G.cells.filter(c => c === null).length === 0) {\n      return { draw: true };\n    }\n  }\n};\n","/*\n * Copyright 2017 The boardgame.io Authors.\n *\n * Use of this source code is governed by a MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport './board.css';\n\nexport class TicTacToeBoard extends React.Component {\n  static propTypes = {\n    G: PropTypes.any.isRequired,\n    ctx: PropTypes.any.isRequired,\n    moves: PropTypes.any.isRequired,\n    playerID: PropTypes.string,\n    isActive: PropTypes.bool,\n    isMultiplayer: PropTypes.bool,\n  };\n\n  onClick = id => {\n    if (this.isActive(id)) {\n      this.props.moves.clickCell(id);\n    }\n  };\n\n  isActive(id) {\n    if (!this.props.isActive) return false;\n    if (this.props.G.cells[id] !== null) return false;\n    return true;\n  }\n\n  render() {\n    let tbody = [];\n    for (let i = 0; i < 3; i++) {\n      let cells = [];\n      for (let j = 0; j < 3; j++) {\n        const id = 3 * i + j;\n        cells.push(\n          <td\n            key={id}\n            className={this.isActive(id) ? 'active' : ''}\n            onClick={() => this.onClick(id)}\n          >\n            {this.props.G.cells[id]}\n          </td>\n        );\n      }\n      tbody.push(<tr key={i}>{cells}</tr>);\n    }\n\n    let winner = null;\n    if (this.props.ctx.gameover) {\n      winner =\n        this.props.ctx.gameover.winner !== undefined ? (\n          <div id=\"winner\">Winner: {this.props.ctx.gameover.winner}</div>\n        ) : (\n            <div id=\"winner\">Draw!</div>\n          );\n    }\n\n    return (\n      <div>\n        <table id=\"board\">\n          <tbody>{tbody}</tbody>\n        </table>\n        {winner}\n      </div>\n    );\n  }\n}","/*\n * Copyright 2017 The boardgame.io Authors.\n *\n * Use of this source code is governed by a MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n */\n\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport { Client } from \"boardgame.io/react\";\nimport { SocketIO } from \"boardgame.io/multiplayer\";\nimport { TicTacToe } from \"./game\";\nimport { TicTacToeBoard } from \"./board\";\n\nconst TicTacToeClient = Client({\n  game: TicTacToe,\n  board: TicTacToeBoard,\n  debug: false,\n  multiplayer: SocketIO({ server: \"localhost:8000\" })\n});\n\nclass App extends React.Component {\n  state = { playerID: null };\n\n  render() {\n    if (this.state.playerID === null) {\n      return (\n        <div>\n          <p>Play as</p>\n          <button onClick={() => this.setState({ playerID: \"0\" })}>\n            Player 0\n          </button>\n          <button onClick={() => this.setState({ playerID: \"1\" })}>\n            Player 1\n          </button>\n        </div>\n      );\n    }\n    return (\n      <div>\n        <TicTacToeClient playerID={this.state.playerID} />\n      </div>\n    );\n  }\n}\n\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}